<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MonitorUserService">

    <resultMap id="MonitorUserService" type="com.ink.monitor.core.po.MonitorUserService">
        <result property="id" column="id"/>
        <result property="serviceId" column="serviceId"/>
        <result property="userId" column="userId"/>
        <result property="sysCode" column="sysCode"/>
        <result property="createTime" column="createTime"/>
    </resultMap>
	<resultMap id="MonitorUser" type="com.ink.monitor.core.po.MonitorUser">
		<result property="userId" column="userId"/>
		<result property="userName" column="userName"/>
		<result property="fullName" column="fullName"/>
		<result property="mobile" column="mobile"/>
		<result property="email" column="email"/>
		<result property="status" column="status"/>
		<result property="warnType" column="warnType"/>
		<result property="createTime" column="createTime"/>
		<result property="updateTime" column="updateTime"/>
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,serviceId ,userId ,sysCode ,createTime 
	    ]]>
	</sql>
	
    <insert id="insert" >
    <![CDATA[
        INSERT INTO monitor_user_service (
	        id  ,
	        serviceId  ,
	        userId  ,
	        sysCode  ,
	        createTime  
        ) VALUES (
        	#{id, jdbcType=INTEGER} ,
        	#{serviceId, jdbcType=INTEGER} ,
        	#{userId, jdbcType=INTEGER} ,
        	#{sysCode, jdbcType=VARCHAR} ,
        	#{createTime, jdbcType=TIMESTAMP} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO monitor_user_service ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=INTEGER} ,
        	#{item.serviceId, jdbcType=INTEGER} ,
        	#{item.userId, jdbcType=INTEGER} ,
        	#{item.sysCode, jdbcType=VARCHAR} ,
        	#{item.createTime, jdbcType=TIMESTAMP} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE monitor_user_service SET
	        serviceId = #{serviceId, jdbcType=INTEGER} ,
	        userId = #{userId, jdbcType=INTEGER} ,
	        sysCode = #{sysCode, jdbcType=VARCHAR} ,
	        createTime = #{createTime, jdbcType=TIMESTAMP} 
        WHERE 
	        id = #{id} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM monitor_user_service WHERE
        id = #{id} 
    ]]>
    </delete>

	<delete id="deleteByUserId">
		<![CDATA[
        DELETE FROM monitor_user_service WHERE
        userId = #{userId}
    ]]>
	</delete>

	<delete id="deleteMonitorUserService">
        DELETE FROM monitor_user_service
        <where>
			<if test="null!=sysCode and ''!=sysCode ">
				AND sysCode = #{sysCode}
			</if>
			<if test="null!=serviceId and ''!=serviceId">
				AND serviceId = #{serviceId}
			</if>
			<if test="null!=userId and ''!=userId">
				AND userId = #{userId}
			</if>
		</where>

	</delete>

    <select id="getById" resultMap="MonitorUserService">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM monitor_user_service 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=sysCode and ''!=sysCode ">
	   			 		AND sysCode = #{sysCode}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=sysCode and ''!=sysCode">
				    <!-- 	AND sysCode LIKE '%'||#{sysCode}||'%' oracle -->
			   			AND sysCode LIKE concat('%',#{sysCode},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=serviceId and ''!=serviceId">
			    AND serviceId = #{serviceId}
			</if>
		   	<if test="null!=userId and ''!=userId">
			    AND userId = #{userId}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND createTime >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND createTime &lt; #{createTimeEnd}
		   	</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM monitor_user_service <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="MonitorUserService">
    	SELECT <include refid="columns"/> FROM monitor_user_service 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="MonitorUserService">
	    SELECT <include refid="columns"/> FROM monitor_user_service 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<select id="findMonitorServiceTree" resultType="hashmap" >
	  select distinct a.* from (
		SELECT t.code AS id, '0' AS pid, t.name AS name, '0' AS checkType, (
				SELECT COUNT(1)
				FROM monitor_user_service t1
				WHERE t1.sysCode = t.code
					AND t1.userId = #{userId}
				) AS checked
		FROM systerm_source t,monitor_service tt
		WHERE t.status = 0 and tt.sysCode=t.code and tt.status='0'
		UNION ALL
		SELECT CONCAT_WS(',', t.sysCode, t.id) AS id, t.sysCode AS pid, t.sourceName, '1' AS checkType, (
				SELECT COUNT(1)
				FROM monitor_user_service t1
				WHERE t.id = t1.serviceId
					AND t1.userId = #{userId}
				) AS checked
		FROM monitor_service t
		WHERE t.status = 0
		) a
	</select>

	<select id="findServiceMonitorUser" resultMap="MonitorUser" >
		select t.* from monitor_user t ,monitor_user_service t1
			where t.userId = t1.userId and t.status='0'  and t1.serviceId = #{serviceId}

	</select>
</mapper>