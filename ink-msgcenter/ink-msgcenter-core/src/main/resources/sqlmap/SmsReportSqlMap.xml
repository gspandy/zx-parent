<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SmsReport">

    <resultMap id="SmsReport" type="com.ink.msgcenter.core.po.SmsReport">
        <result property="taskId" column="task_id"/>
        <result property="mobile" column="mobile"/>
        <result property="logId" column="log_id"/>
        <result property="merctCode" column="merct_code"/>
        <result property="smsType" column="sms_type"/>
		<result property="smsId" column="sms_id"/>
		<result property="reportUrl" column="report_url"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        task_id ,mobile ,log_id ,merct_code ,sms_type,sms_id,report_url ,create_time
	    ]]>
	</sql>
	
    <insert id="insert" >
    <![CDATA[
        INSERT INTO sms_report (
	        task_id  ,
	        mobile  ,
	        log_id  ,
	        merct_code  ,
	        sms_type  ,
	        sms_id,
	        report_url,
	        create_time  
        ) VALUES (
        	#{taskId, jdbcType=VARCHAR} ,
        	#{mobile, jdbcType=VARCHAR} ,
        	#{logId, jdbcType=VARCHAR} ,
        	#{merctCode, jdbcType=VARCHAR} ,
        	#{smsType, jdbcType=CHAR} ,
        	#{smsId, jdbcType=CHAR} ,
        	#{reportUrl, jdbcType=VARCHAR} ,
        	#{createTime, jdbcType=TIMESTAMP} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO sms_report ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.taskId, jdbcType=VARCHAR} ,
        	#{item.mobile, jdbcType=VARCHAR} ,
        	#{item.logId, jdbcType=VARCHAR} ,
        	#{item.merctCode, jdbcType=VARCHAR} ,
        	#{item.smsType, jdbcType=CHAR} ,
			#{item.smsId, jdbcType=CHAR} ,
			#{item.reportUrl, jdbcType=VARCHAR} ,
        	#{item.createTime, jdbcType=TIMESTAMP} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE sms_report SET
	        log_id = #{logId, jdbcType=VARCHAR} ,
	        merct_code = #{merctCode, jdbcType=VARCHAR} ,
	        sms_type = #{smsType, jdbcType=CHAR} ,
	         sms_id = #{smsId, jdbcType=CHAR} ,
	        report_url = #{reportUrl, jdbcType=VARCHAR} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} 
        WHERE 
	        task_id = #{taskId} and
	        mobile = #{mobile} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM sms_report WHERE
        task_id = #{taskId} and
        mobile = #{mobile} 
    ]]>
    </delete>

	<delete id="deleteInfo">
		<![CDATA[
        DELETE FROM sms_report WHERE
        task_id = #{taskId} and
        mobile = #{mobile}
    ]]>
	</delete>

    
    <select id="getById" resultMap="SmsReport">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM sms_report 
	        WHERE 
		        task_id = #{taskId} and
		        mobile = #{mobile} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=logId and ''!=logId ">
	   			 		AND log_id = #{logId}
	   			   	</if>
			       	<if test="null!=merctCode and ''!=merctCode ">
	   			 		AND merct_code = #{merctCode}
	   			   	</if>
			       	<if test="null!=smsType and ''!=smsType ">
	   			 		AND sms_type = #{smsType}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=logId and ''!=logId">
				    <!-- 	AND log_id LIKE '%'||#{logId}||'%' oracle -->
			   			AND log_id LIKE concat('%',#{logId},'%')
			   			
			   		</if>
				    <if test="null!=merctCode and ''!=merctCode">
				    <!-- 	AND merct_code LIKE '%'||#{merctCode}||'%' oracle -->
			   			AND merct_code LIKE concat('%',#{merctCode},'%')
			   			
			   		</if>
				    <if test="null!=smsType and ''!=smsType">
				    <!-- 	AND sms_type LIKE '%'||#{smsType}||'%' oracle -->
			   			AND sms_type LIKE concat('%',#{smsType},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=taskId and ''!=taskId">
			    AND task_id = #{taskId}
			</if>
		   	<if test="null!=mobile and ''!=mobile">
			    AND mobile = #{mobile}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM sms_report <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="SmsReport">
    	SELECT <include refid="columns"/> FROM sms_report 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="SmsReport">
	    SELECT <include refid="columns"/> FROM sms_report 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
</mapper>