<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EmailChannel">

    <resultMap id="EmailChannel" type="com.ink.msgcenter.core.po.EmailChannel">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="chnCode" column="chn_code"/>
        <result property="smtpHost" column="smtp_host"/>
        <result property="smtpPort" column="smtp_port"/>
        <result property="mailAddr" column="mail_addr"/>
        <result property="mailPwd" column="mail_pwd"/>
        <result property="remark" column="remark"/>
        <result property="priorityLevel" column="priority_level"/>
        <result property="status" column="status"/>
        <result property="creatorId" column="creator_id"/>
        <result property="creatorName" column="creator_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updatorId" column="updator_id"/>
        <result property="updatorName" column="updator_name"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,name ,chn_code ,smtp_host ,smtp_port ,mail_addr ,mail_pwd ,remark ,priority_level ,status ,creator_id ,creator_name ,create_time ,updator_id ,updator_name ,update_time 
	    ]]>
	</sql>
	
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO email_channel (
	        id  ,
	        name  ,
	        chn_code  ,
	        smtp_host  ,
	        smtp_port  ,
	        mail_addr  ,
	        mail_pwd  ,
	        remark  ,
	        priority_level  ,
	        status  ,
	        creator_id  ,
	        creator_name  ,
	        create_time  ,
	        updator_id  ,
	        updator_name  ,
	        update_time  
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{name, jdbcType=VARCHAR} ,
        	#{chnCode, jdbcType=CHAR} ,
        	#{smtpHost, jdbcType=VARCHAR} ,
        	#{smtpPort, jdbcType=VARCHAR} ,
        	#{mailAddr, jdbcType=VARCHAR} ,
        	#{mailPwd, jdbcType=VARCHAR} ,
        	#{remark, jdbcType=VARCHAR} ,
        	#{priorityLevel, jdbcType=INTEGER} ,
        	#{status, jdbcType=CHAR} ,
        	#{creatorId, jdbcType=VARCHAR} ,
        	#{creatorName, jdbcType=VARCHAR} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{updatorId, jdbcType=VARCHAR} ,
        	#{updatorName, jdbcType=VARCHAR} ,
        	#{updateTime, jdbcType=TIMESTAMP} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO email_channel ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.name, jdbcType=VARCHAR} ,
        	#{item.chnCode, jdbcType=CHAR} ,
        	#{item.smtpHost, jdbcType=VARCHAR} ,
        	#{item.smtpPort, jdbcType=VARCHAR} ,
        	#{item.mailAddr, jdbcType=VARCHAR} ,
        	#{item.mailPwd, jdbcType=VARCHAR} ,
        	#{item.remark, jdbcType=VARCHAR} ,
        	#{item.priorityLevel, jdbcType=INTEGER} ,
        	#{item.status, jdbcType=CHAR} ,
        	#{item.creatorId, jdbcType=VARCHAR} ,
        	#{item.creatorName, jdbcType=VARCHAR} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.updatorId, jdbcType=VARCHAR} ,
        	#{item.updatorName, jdbcType=VARCHAR} ,
        	#{item.updateTime, jdbcType=TIMESTAMP} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE email_channel SET
	        name = #{name, jdbcType=VARCHAR} ,
	        chn_code = #{chnCode, jdbcType=CHAR} ,
	        smtp_host = #{smtpHost, jdbcType=VARCHAR} ,
	        smtp_port = #{smtpPort, jdbcType=VARCHAR} ,
	        mail_addr = #{mailAddr, jdbcType=VARCHAR} ,
	        mail_pwd = #{mailPwd, jdbcType=VARCHAR} ,
	        remark = #{remark, jdbcType=VARCHAR} ,
	        priority_level = #{priorityLevel, jdbcType=INTEGER} ,
	        status = #{status, jdbcType=CHAR} ,
	        creator_id = #{creatorId, jdbcType=VARCHAR} ,
	        creator_name = #{creatorName, jdbcType=VARCHAR} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} ,
	        updator_id = #{updatorId, jdbcType=VARCHAR} ,
	        updator_name = #{updatorName, jdbcType=VARCHAR} ,
	        update_time = #{updateTime, jdbcType=TIMESTAMP} 
        WHERE 
	        id = #{id} 
    ]]>
    </update>


	<update id="updateInfo" >
        UPDATE email_channel
			<set >
				<if test="priorityLevel > 0 ">
					 priority_level = #{priorityLevel},
				</if>
				<if test="null!=status and ''!=status ">
					status = #{status, jdbcType=CHAR},
				</if>
				<if test="null!=updatorName and ''!=updatorName ">
					updator_name = #{updatorName},
				</if>
				<if test="null!=updatorId and ''!=updatorId">
					updator_id = #{updatorId},
				</if>
				<if test="null!=updateTime and ''!=updateTime">
					update_time = #{updateTime}
				</if>
			</set>
        WHERE
	        id = #{id}
	</update>

	<update id="resetUpdatePriorityLevel" >
		 update email_channel tt set tt.priority_level = (
				select rownum from (select t.id,COUNT(*) as rownum from email_channel t,email_channel t1
				where t.priority_level >= t1.priority_level and t.status!='2' and t1.status !='2'  group by  t.id) a where tt.id = a.id
			) where  tt.status != '2'
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM email_channel WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="EmailChannel">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM email_channel 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>
	<select id="getMaxEmailChannelCode" resultType="hashmap">
		select max(CONVERT(chn_code,SIGNED)) chnCode,Convert(max(priority_level),SIGNED) priorityLevel from email_channel
	</select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=name and ''!=name ">
	   			 		AND name = #{name}
	   			   	</if>
			       	<if test="null!=chnCode and ''!=chnCode ">
	   			 		AND chn_code = #{chnCode}
	   			   	</if>
			       	<if test="null!=smtpHost and ''!=smtpHost ">
	   			 		AND smtp_host = #{smtpHost}
	   			   	</if>
			       	<if test="null!=smtpPort and ''!=smtpPort ">
	   			 		AND smtp_port = #{smtpPort}
	   			   	</if>
			       	<if test="null!=mailAddr and ''!=mailAddr ">
	   			 		AND mail_addr = #{mailAddr}
	   			   	</if>
			       	<if test="null!=mailPwd and ''!=mailPwd ">
	   			 		AND mail_pwd = #{mailPwd}
	   			   	</if>
			       	<if test="null!=remark and ''!=remark ">
	   			 		AND remark = #{remark}
	   			   	</if>
					<choose>
						<when test="null!=status and ''!=status ">
							AND status = #{status}
						</when>
						<otherwise>
							AND status !='2'
						</otherwise>
					</choose>
			       	<if test="null!=creatorName and ''!=creatorName ">
	   			 		AND creator_name = #{creatorName}
	   			   	</if>
			       	<if test="null!=updatorName and ''!=updatorName ">
	   			 		AND updator_name = #{updatorName}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=name and ''!=name">
				    <!-- 	AND name LIKE '%'||#{name}||'%' oracle -->
			   			AND name LIKE concat('%',#{name},'%')
			   			
			   		</if>
				    <if test="null!=chnCode and ''!=chnCode">
				    <!-- 	AND chn_code LIKE '%'||#{chnCode}||'%' oracle -->
			   			AND chn_code LIKE concat('%',#{chnCode},'%')
			   			
			   		</if>
				    <if test="null!=smtpHost and ''!=smtpHost">
				    <!-- 	AND smtp_host LIKE '%'||#{smtpHost}||'%' oracle -->
			   			AND smtp_host LIKE concat('%',#{smtpHost},'%')
			   			
			   		</if>
				    <if test="null!=smtpPort and ''!=smtpPort">
				    <!-- 	AND smtp_port LIKE '%'||#{smtpPort}||'%' oracle -->
			   			AND smtp_port LIKE concat('%',#{smtpPort},'%')
			   			
			   		</if>
				    <if test="null!=mailAddr and ''!=mailAddr">
				    <!-- 	AND mail_addr LIKE '%'||#{mailAddr}||'%' oracle -->
			   			AND mail_addr LIKE concat('%',#{mailAddr},'%')
			   			
			   		</if>
				    <if test="null!=mailPwd and ''!=mailPwd">
				    <!-- 	AND mail_pwd LIKE '%'||#{mailPwd}||'%' oracle -->
			   			AND mail_pwd LIKE concat('%',#{mailPwd},'%')
			   			
			   		</if>
				    <if test="null!=remark and ''!=remark">
				    <!-- 	AND remark LIKE '%'||#{remark}||'%' oracle -->
			   			AND remark LIKE concat('%',#{remark},'%')
			   			
			   		</if>
					<choose>
						<when test="null!=status and ''!=status ">
							AND status = #{status}
						</when>
						<otherwise>
							AND status !='2'
						</otherwise>
					</choose>
				    <if test="null!=creatorName and ''!=creatorName">
				    <!-- 	AND creator_name LIKE '%'||#{creatorName}||'%' oracle -->
			   			AND creator_name LIKE concat('%',#{creatorName},'%')
			   			
			   		</if>
				    <if test="null!=updatorName and ''!=updatorName">
				    <!-- 	AND updator_name LIKE '%'||#{updatorName}||'%' oracle -->
			   			AND updator_name LIKE concat('%',#{updatorName},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=priorityLevel and ''!=priorityLevel">
			    AND priority_level = #{priorityLevel}
			</if>
		   	<if test="null!=creatorId and ''!=creatorId">
			    AND creator_id = #{creatorId}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=updatorId and ''!=updatorId">
			    AND updator_id = #{updatorId}
			</if>
		   	<if test="null!=updateTimeBegin and ''!=updateTimeBegin">
		   		AND update_time >= #{updateTimeBegin}
		   	</if>
		   	<if test="null!=updateTimeEnd and ''!=updateTimeEnd">
		   		AND update_time &lt; #{updateTimeEnd}
		   	</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM email_channel <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="EmailChannel">
    	SELECT <include refid="columns"/> FROM email_channel 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="EmailChannel">
	    SELECT <include refid="columns"/> FROM email_channel 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<select id="findEmailChannelTree" resultType="hashmap">
		select t.id,0 as pid,t.name, t.priority_level as level from email_channel t
			where t.status !='2' order by t.priority_level
	</select>
	
</mapper>