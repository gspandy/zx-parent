<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 短信状态报告调度 start -->
	<bean id="smsStatusReportJob" class="com.ink.msgcenter.external.sms.zw.job.SmsStatusReportJob" />

	<!-- JobDetail的配置 -->
	<bean id="smsStatusReportJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="smsStatusReportJob" />
		<property name="targetMethod" value="executeJob" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="smsStatusReportJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="smsStatusReportJobDetail" />
		<property name="cronExpression" value="1/30 * * ? * *" />
	</bean>
	<!-- end -->
	<!--redis短信状态报告 start-->
	<bean id="redisSmsStatusReportJob" class="com.ink.msgcenter.external.sms.zw.job.RedisSmsStatusReportJob" />
	<!-- JobDetail的配置 -->
	<bean id="redisSmsStatusReportJobDetail"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="redisSmsStatusReportJob" />
		<property name="targetMethod" value="executeJob" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="redisSmsStatusReportJobTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="redisSmsStatusReportJobDetail" />
		<property name="cronExpression" value="1/30 * * ? * *" />
	</bean>
	<!--redis短信状态报告 end-->
	<!--清理失效短信上行信息 start-->
	<bean id="cleanSmsCodeJob" class="com.ink.msgcenter.external.sms.zw.job.CleanSmsCodeJob" />
	<!-- JobDetail的配置 -->
	<bean id="cleanSmsCodeJobDetail"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cleanSmsCodeJob" />
		<property name="targetMethod" value="executeJob" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="cleanSmsCodeJobTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cleanSmsCodeJobDetail" />
		<property name="cronExpression" value="* * 1 ? * *" />
		<!--<property name="cronExpression" value="1/15 * * ? * *" />-->
	</bean>
	<!--清理失效短信上行信息 end-->

	<!-- 检查筑望上行短信 -->
	<bean id="smsUplinkJob" class="com.ink.msgcenter.external.sms.zw.job.SmsUplinkJob" />
	<!-- 配置JOB -->
	<bean id="smsUplinkDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="smsUplinkJob" />
		</property>
		<property name="targetMethod">
			<value>executeJob</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<!--  配置JOB END -->
	<!--  配置调度 -->
	<bean id="smsUplinkTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="smsUplinkDetail" />
		</property>
		<property name="cronExpression">
			<value>30 * * * * ?</value>
		</property>
	</bean>
	<!-- 配置调度 END -->

	<!--调度载入定时工厂 -->
	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!-- 短信状态报告任务 -->
				<!--<ref bean="smsStatusReportJobTrigger" />-->
				<!-- resdis短信状态报告任务 -->
				<!--<ref bean="redisSmsStatusReportJobTrigger" />-->
				<!-- 检查筑望上行短信 -->
				<!--<ref bean="smsUplinkTrigger" />-->
				<!-- 定时清理短信上行信息-->
				<!--<ref bean="cleanSmsCodeJobTrigger" />-->
			</list>
		</property>
	</bean>
	<!--调度载入定时工厂END -->

</beans>
