<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:noNamespaceSchemaLocation="classpath:xsd/dubbo.xsd"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">


	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>classpath:/conf/app.properties</value> 
		</list> </property> <property name="fileEncoding" value="utf-8" /> </bean> 
		应用信息，用于计算依赖关系 <dubbo:application name="${dubbo.application}" organization="yinker" 
		/> 用dubbo协议在20880端口暴露服务 <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" 
		serialization="kryo" optimizer="com.jianlc.activity.api.optimizer.SerializationOptimizerImpl"/> 
		<dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" /> 使用zookeeper注册中心进行注册 
		<dubbo:registry protocol="zookeeper" address="${dubbo.registry.address}" 
		client="curator" file="${user.home}/output/dubbo.cache" /> <dubbo:monitor 
		protocol="registry" /> provider全局配置 声明需要暴露的服务接口 loadbalance="random" 随机，按权重设置随机概率。 
		loadbalance="roundrobin" 轮循，按公约后权重设置轮循比率。 loadbalance="LeastActive" 最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。 
		loadbalance="ConsistentHash" 一致性Hash，相同参数的请求总是发到同一提供者。 retries="0" 重试机制 timeout=20000 
		超时时间 <dubbo:provider retries="${dubbo.provider.retries}" timeout="${dubbo.provider.timeout}" 
		loadbalance="${dubbo.provider.loadbalance}" /> -->
	<dubbo:application name="yinker-trade" owner="yangchen" />
	<!-- 使用multicast广播注册中心暴露服务地址 -->
	<dubbo:registry protocol="zookeeper" address="${host.zookeeper}"
		port="2181" />

	<!-- 用dubbo协议在20880端口暴露服务 -->
	<dubbo:protocol name="dubbo" port="20891" serialization="nativejava"
		threads="100" heartbeat="100000" /><!-- host="10.0.0.143" -->
	<!-- 配置所有的服务提供者均采用日志Filter进行过滤 -->
	<dubbo:provider filter="providerLogMdcFilter"/>
	<dubbo:consumer filter="consumerLogMdcFilter" check="false"/>
</beans>
