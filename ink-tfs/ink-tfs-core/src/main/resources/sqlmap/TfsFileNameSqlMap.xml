<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TfsFileName">

    <resultMap id="TfsFileName" type="com.yinker.tfs.core.po.TfsFileName">
        <result property="id" column="id"/>
        <result property="sourceCode" column="sourceCode"/>
        <result property="moduleCode" column="moduleCode"/>
        <result property="tfsName" column="tfsName"/>
        <result property="fileName" column="fileName"/>
        <result property="suffix" column="suffix"/>
        <result property="status" column="status"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
		<result property="uploader" column="uploader"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,sourceCode ,moduleCode ,tfsName ,fileName ,suffix ,status ,createTime ,updateTime ,uploader
	    ]]>
	</sql>
	
    <insert id="insert" >
    <![CDATA[
        INSERT INTO tfs_file_name (
	        id  ,
	        sourceCode  ,
	        moduleCode  ,
	        tfsName  ,
	        fileName  ,
	        suffix  ,
	        status  ,
	        createTime  ,
	        updateTime  ,
	        uploader
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{sourceCode, jdbcType=VARCHAR} ,
        	#{moduleCode, jdbcType=VARCHAR} ,
        	#{tfsName, jdbcType=VARCHAR} ,
        	#{fileName, jdbcType=VARCHAR} ,
        	#{suffix, jdbcType=VARCHAR} ,
        	#{status, jdbcType=INTEGER} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{updateTime, jdbcType=TIMESTAMP} ,
        	#{uploader, jdbcType=VARCHAR}
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO tfs_file_name ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.sourceCode, jdbcType=VARCHAR} ,
        	#{item.moduleCode, jdbcType=VARCHAR} ,
        	#{item.tfsName, jdbcType=VARCHAR} ,
        	#{item.fileName, jdbcType=VARCHAR} ,
        	#{item.suffix, jdbcType=VARCHAR} ,
        	#{item.status, jdbcType=INTEGER} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.updateTime, jdbcType=TIMESTAMP} ,
			#{item.uploader, jdbcType=VARCHAR}
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE tfs_file_name SET
	        sourceCode = #{sourceCode, jdbcType=VARCHAR} ,
	        moduleCode = #{moduleCode, jdbcType=VARCHAR} ,
	        tfsName = #{tfsName, jdbcType=VARCHAR} ,
	        fileName = #{fileName, jdbcType=VARCHAR} ,
	        suffix = #{suffix, jdbcType=VARCHAR} ,
	        status = #{status, jdbcType=INTEGER} ,
	        createTime = #{createTime, jdbcType=TIMESTAMP} ,
	        updateTime = #{updateTime, jdbcType=TIMESTAMP} ,
	        uploader = #{uploader, jdbcType=VARCHAR}
        WHERE 
	        id = #{id} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM tfs_file_name WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="TfsFileName">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM tfs_file_name 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
			<if test="null!=sourceCode and ''!=sourceCode ">
				AND sourceCode = #{sourceCode}
			</if>
			<if test="null!=moduleCode and ''!=moduleCode ">
				AND moduleCode = #{moduleCode}
			</if>
			<if test="null!=tfsName and ''!=tfsName ">
				AND tfsName = #{tfsName}
			</if>
			<if test="null!=suffix and ''!=suffix ">
				AND suffix = #{suffix}
			</if>
			<if test="null!=fileName and ''!=fileName">
				<!-- 	AND fileName LIKE '%'||#{fileName}||'%' oracle -->
				AND fileName LIKE concat('%',#{fileName},'%')
			</if>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=status and ''!=status">
			    AND status = #{status}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND createTime >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND createTime &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=updateTimeBegin and ''!=updateTimeBegin">
		   		AND updateTime >= #{updateTimeBegin}
		   	</if>
		   	<if test="null!=updateTimeEnd and ''!=updateTimeEnd">
		   		AND updateTime &lt; #{updateTimeEnd}
		   	</if>
			<if test="null != uploader and ''!= uploader ">
				AND uploader = #{uploader}
			</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM tfs_file_name <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="TfsFileName">
    	SELECT <include refid="columns"/> FROM tfs_file_name 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="TfsFileName">
	    SELECT <include refid="columns"/> FROM tfs_file_name 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<select id="findByFileName" resultMap="TfsFileName">
		SELECT <include refid="columns"/> FROM tfs_file_name
		<where>
			<if test="null!=fileName and ''!=fileName ">
				AND fileName = #{fileName}
			</if>
			<if test="null!=suffix and ''!=suffix ">
				AND suffix = #{suffix}
			</if>
			<if test="null!=sourceCode and ''!=sourceCode ">
				AND sourceCode = #{sourceCode}
			</if>
			<if test="null!=moduleCode and ''!=moduleCode ">
				AND moduleCode = #{moduleCode}
			</if>
			AND status = 0
		</where>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
	</select>
	
</mapper>