<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-autowire="byName" default-init-method="init">

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<!-- 操作都会被记录在作业仓库中，有两种一种内存，另一种数据库。我们采用第一种记录job状态信息 -->
	<!-- 内存仓库 -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<!-- 任务注册器 -->
	<!-- 所谓的“任务注册器（JobRegistry）”不是必须的（它的父接口是“任务定位器JobLocator”）， 但如果你想追踪哪些任务在当前的上下文中是有效的，那么它就很有用。同时对于在一个应用上下文中集中的收集在别处创建的任务也很有用（比如在下级上下文中）。 
		自定义实现“任务注册器（JobRegistry）”也可以用来更改任务名称或其他已注册的属性。框架只提供了一种实现，基于简单的映射表（map） -->
	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<!-- A BeanPostProcessor that registers Job beans with a JobRegistry. -->
	<!-- 任务处理器的Bean发送处理器（JobRegistryBeanPostProcessor） -->
	<bean
		class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>
	
	<!-- 以下配置具体job信息 -->
	<!-- 作业调度器，用来启动job,引用作业仓库 -->
	<bean id="userMsgJobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	<!-- Actual Job -->
	<batch:job id="userMsgJob" restartable="true">
		<batch:step id="userMsgJobStep">
			<batch:tasklet allow-start-if-complete="false"
				start-limit="1"  task-executor="taskExecutor" throttle-limit="5">
				<batch:chunk reader="userMsgJobReader" writer="userMsgJobWriter"
					processor="userMsgJobProcessor" commit-interval="50000" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<!-- ItemReader reads a complete line one by one from input file -->
	<bean id="userMsgJobReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" >
		<property name="lineMapper" ref="userMsgJobLineMapper"/>
		<property name="resource" ref="res" />
		<property name="strict" value="false"/>
		<property name="encoding" value="UTF-8"></property>
	</bean>
	
	<bean id="userMsgJobLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
        <property name="lineTokenizer" ref="userMsgLineTokenizer"/>  
        <property name="fieldSetMapper" ref="userMsgFieldSetMapper"/>  
    </bean>  
    <bean id="userMsgFieldSetMapper" class="com.ink.user.ext.core.batch.linemapper.UserMsgJobFieldSetMapper"/>
    <bean id="userMsgLineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"/> 
	
	<!-- ItemWriter writes a line into output flat file -->
	<bean id="userMsgJobWriter" class="com.ink.user.ext.core.batch.writer.UserMsgJobWriter"
		scope="step">
		<property name="mchId" value="#{jobParameters['mchId']}"></property>
		<property name="sendType" value="#{jobParameters['sendType']}"></property>
		<property name="sendTime" value="#{jobParameters['sendTime']}"></property>
		<property name="fileId" value="#{jobParameters['fileId']}"></property>
	</bean>

	<!-- Optional ItemProcessor to perform business logic/filtering on the input 
		records -->
	<bean id="userMsgJobProcessor"
		class="com.ink.user.ext.core.batch.processor.UserMsgJobProcessor" scope="step">
		<property name="fileId" value="#{jobParameters['fileId']}"></property>	
	</bean>
	
	<bean id="res" scope="step" class="com.ink.user.ext.core.batch.resources.FileSystemResource">
		<constructor-arg type="java.lang.String" value="#{jobParameters['inputFilePath']}"/>
	</bean>
		
</beans>			