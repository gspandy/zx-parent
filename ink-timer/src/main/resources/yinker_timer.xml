<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<context:component-scan base-package="com.yinker.timer" />
	<context:component-scan base-package="com.yinker.user" />

	<!-- 加载配置文件 -->
	<bean id="propertyResources" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath*:conf/*.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
				<value>classpath*:properties/*.properties</value>
			</list>
		</constructor-arg>
	</bean>
	 <!-- 将配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="com.yinker.user.util.CustomizedPropertyPlaceholderConfigurer">  
        <property name="locations" ref="propertyResources" />  
    </bean> 
    <import resource="classpath:dubbo/*.xml" />
	<import resource="classpath*:yinker-user-core.xml" />
	<import resource="classpath*:spring/spring-atp-check.xml" />
	<import resource="classpath*:spring/spring-config.xml" />
	<import resource="classpath*:spring/spring-rabbitmq-producer.xml" />
	<import resource="classpath*:spring/spring-rabbitmq.xml" />
	<import resource="classpath*:spring/spring-mongo.xml" />
	<import resource="classpath*:spring/spring-redis.xml" />
	<import resource="classpath*:spring/spring-patsglobalkey.xml" />
	<import resource="classpath*:spring/spring-jdbc.xml" />
	<import resource="classpath*:spring/yinker_trade_service.xml" />
	
	<!--工作JOB 采用自动注入 BeanId 描述 yinkerJob yinker业务JOB -->
	
	<!-- 配置JOB 
	<bean id="yinkerJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="yinkerDemoListJob" />
		</property>
		<property name="targetMethod">
			<value>excute</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<bean id="yinkerJobDetail2"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="yinkerDemoListJob2" />
		</property>
		<property name="targetMethod">
			<value>excute</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	 配置JOB END 
	配置调度 
	<bean id="yinkerTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="yinkerJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0 0/2 9-18 * * ?</value>
		</property>
	</bean>
	<bean id="yinkerTrigger2"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="yinkerJobDetail2" />
		</property>
		<property name="cronExpression">
			<value>0 0 23 * * ?</value>
		</property>
	</bean>
	配置调度 END -->

	<!-- 更新控制表 start -->
	<bean id="accControlJob" class="com.yinker.timer.job.AccControlJob" />
	<!-- JobDetail的配置 -->
	<bean id="accControlJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="accControlJob" />
		<property name="targetMethod" value="work" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="accControlJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="accControlJobDetail" />
		<property name="cronExpression" value="0 0 23 * * ?" />
	</bean>
	<!-- end -->
	
	<!-- 自动解冻账户过期冻结金额 start -->
	<bean id="accUnfrozenJob" class="com.yinker.timer.job.AccUnfrozenJob" />
	<!-- JobDetail的配置 -->
	<bean id="accUnfrozenJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="accUnfrozenJob" />
		<property name="targetMethod" value="work" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="accUnfrozenJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="accUnfrozenJobDetail" />
		<property name="cronExpression" value="0 0/30 * * * ?" />
	</bean>
	<!-- end -->
	
	<!-- 自动检测通道银行失败率任务开启start -->
	<bean id="asileBankFailTestJob" class="com.yinker.timer.job.AsileBankFailTestJob" />
	<!-- JobDetail的配置 -->
	<bean id="asileBankFailTestJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="asileBankFailTestJob" />
		<property name="targetMethod" value="work" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<!-- Trigger的配置 -->
	<bean id="asileBankFailTestJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="asileBankFailTestJobDetail" />
		<property name="cronExpression" value="0 0/3 * * * ?" />
	</bean>
	<!-- end -->

	<!--调度载入定时工厂 -->
	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!--<ref bean="yinkerTrigger" />
				<ref bean="yinkerTrigger2" />-->
				<!-- 更新控制表
				<ref bean="accControlJobTrigger" /> -->
				<!-- 自动解冻账户过期冻结金额 
				<ref bean="accUnfrozenJobTrigger" /> -->
				<!-- 自动检测通道银行失败率任务 -->
				<ref bean="asileBankFailTestJobTrigger" />
			</list>
		</property>
	</bean>
	<!--调度载入定时工厂END -->
</beans>
