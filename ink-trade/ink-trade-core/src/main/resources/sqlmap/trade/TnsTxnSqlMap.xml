<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TnsTxn">

    <resultMap id="TnsTxn" type="com.ink.trade.core.po.TnsTxn">
        <result property="id" column="id"/>
        <result property="txnNature" column="txn_nature"/>
        <result property="txnName" column="txn_name"/>
        <result property="txnCode" column="txn_code"/>
        <result property="status" column="status"/>
        <result property="createTime" column="create_time"/>
        <result property="operator" column="operator"/>
        <result property="isDelete" column="is_delete"/>
        <result property="version" column="version"/>
        <result property="remark" column="remark"/>
        <result property="lastupdateTime" column="lastupdate_time"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,txn_nature ,txn_name ,txn_code ,status ,create_time ,operator ,is_delete ,version ,remark ,lastupdate_time 
	    ]]>
	</sql>
	
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    <![CDATA[
        INSERT INTO tns_txn (
	        id  ,
	        txn_nature  ,
	        txn_name  ,
	        txn_code  ,
	        status  ,
	        create_time  ,
	        operator  ,
	        is_delete  ,
	        version  ,
	        remark  ,
	        lastupdate_time  
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{txnNature, jdbcType=VARCHAR} ,
        	#{txnName, jdbcType=VARCHAR} ,
        	#{txnCode, jdbcType=VARCHAR} ,
        	#{status, jdbcType=BIT} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{operator, jdbcType=VARCHAR} ,
        	#{isDelete, jdbcType=BIT} ,
        	#{version, jdbcType=TINYINT} ,
        	#{remark, jdbcType=VARCHAR} ,
        	#{lastupdateTime, jdbcType=TIMESTAMP} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO tns_txn ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.txnNature, jdbcType=VARCHAR} ,
        	#{item.txnName, jdbcType=VARCHAR} ,
        	#{item.txnCode, jdbcType=VARCHAR} ,
        	#{item.status, jdbcType=BIT} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.operator, jdbcType=VARCHAR} ,
        	#{item.isDelete, jdbcType=BIT} ,
        	#{item.version, jdbcType=TINYINT} ,
        	#{item.remark, jdbcType=VARCHAR} ,
        	#{item.lastupdateTime, jdbcType=TIMESTAMP} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE tns_txn SET
	        txn_nature = #{txnNature, jdbcType=VARCHAR} ,
	        txn_name = #{txnName, jdbcType=VARCHAR} ,
	        txn_code = #{txnCode, jdbcType=VARCHAR} ,
	        status = #{status, jdbcType=BIT} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} ,
	        operator = #{operator, jdbcType=VARCHAR} ,
	        is_delete = #{isDelete, jdbcType=BIT} ,
	        version = #{version, jdbcType=TINYINT} ,
	        remark = #{remark, jdbcType=VARCHAR} ,
	        lastupdate_time = #{lastupdateTime, jdbcType=TIMESTAMP} 
        WHERE 
	        id = #{id} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM tns_txn WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="TnsTxn">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM tns_txn 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=txnNature and ''!=txnNature ">
	   			 		AND txn_nature = #{txnNature}
	   			   	</if>
			       	<if test="null!=txnName and ''!=txnName ">
	   			 		AND txn_name = #{txnName}
	   			   	</if>
			       	<if test="null!=txnCode and ''!=txnCode ">
	   			 		AND txn_code = #{txnCode}
	   			   	</if>
			       	<if test="null!=operator and ''!=operator ">
	   			 		AND operator = #{operator}
	   			   	</if>
			       	<if test="null!=remark and ''!=remark ">
	   			 		AND remark = #{remark}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=txnNature and ''!=txnNature">
				    <!-- 	AND txn_nature LIKE '%'||#{txnNature}||'%' oracle -->
			   			AND txn_nature LIKE concat('%',#{txnNature},'%')
			   			
			   		</if>
				    <if test="null!=txnName and ''!=txnName">
				    <!-- 	AND txn_name LIKE '%'||#{txnName}||'%' oracle -->
			   			AND txn_name LIKE concat('%',#{txnName},'%')
			   			
			   		</if>
				    <if test="null!=txnCode and ''!=txnCode">
				    <!-- 	AND txn_code LIKE '%'||#{txnCode}||'%' oracle -->
			   			AND txn_code LIKE concat('%',#{txnCode},'%')
			   			
			   		</if>
				    <if test="null!=operator and ''!=operator">
				    <!-- 	AND operator LIKE '%'||#{operator}||'%' oracle -->
			   			AND operator LIKE concat('%',#{operator},'%')
			   			
			   		</if>
				    <if test="null!=remark and ''!=remark">
				    <!-- 	AND remark LIKE '%'||#{remark}||'%' oracle -->
			   			AND remark LIKE concat('%',#{remark},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=status and ''!=status">
			    AND status = #{status}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=isDelete and ''!=isDelete">
			    AND is_delete = #{isDelete}
			</if>
		   	<if test="null!=version and ''!=version">
			    AND version = #{version}
			</if>
		   	<if test="null!=lastupdateTimeBegin and ''!=lastupdateTimeBegin">
		   		AND lastupdate_time >= #{lastupdateTimeBegin}
		   	</if>
		   	<if test="null!=lastupdateTimeEnd and ''!=lastupdateTimeEnd">
		   		AND lastupdate_time &lt; #{lastupdateTimeEnd}
		   	</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM tns_txn <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="TnsTxn">
    	SELECT <include refid="columns"/> FROM tns_txn 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
		<if test="null!=offset and null!=limit">
	          limit #{offset} , #{limit} 
		</if>
		
		
    </select>

	
	<select id="find" resultMap="TnsTxn">
	    SELECT <include refid="columns"/> FROM tns_txn 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
</mapper>

