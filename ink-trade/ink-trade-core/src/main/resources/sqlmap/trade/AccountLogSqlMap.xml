<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AccountLog">

    <resultMap id="AccountLog" type="com.ink.trade.core.po.AccountLog">
        <result property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userId" column="user_id"/>
        <result property="amt" column="amt"/>
        <result property="createTime" column="create_time"/>
        <result property="remark" column="remark"/>
        <result property="ordId" column="ord_id"/>
        <result property="refundId" column="refund_id"/>
        <result property="inOut" column="in_out"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,user_name ,user_id ,amt ,create_time ,remark ,ord_id ,refund_id ,in_out 
	    ]]>
	</sql>
	
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    <![CDATA[
        INSERT INTO account_log (
	        id  ,
	        user_name  ,
	        user_id  ,
	        amt  ,
	        create_time  ,
	        remark  ,
	        ord_id  ,
	        refund_id  ,
	        in_out  
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{userName, jdbcType=VARCHAR} ,
        	#{userId, jdbcType=BIGINT} ,
        	#{amt, jdbcType=DECIMAL} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{remark, jdbcType=VARCHAR} ,
        	#{ordId, jdbcType=VARCHAR} ,
        	#{refundId, jdbcType=BIGINT} ,
        	#{inOut, jdbcType=INTEGER} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO account_log ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.userName, jdbcType=VARCHAR} ,
        	#{item.userId, jdbcType=BIGINT} ,
        	#{item.amt, jdbcType=DECIMAL} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.remark, jdbcType=VARCHAR} ,
        	#{item.ordId, jdbcType=VARCHAR} ,
        	#{item.refundId, jdbcType=BIGINT} ,
        	#{item.inOut, jdbcType=INTEGER} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE account_log SET
	        id = #{id, jdbcType=BIGINT} ,
	        user_name = #{userName, jdbcType=VARCHAR} ,
	        user_id = #{userId, jdbcType=BIGINT} ,
	        amt = #{amt, jdbcType=DECIMAL} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} ,
	        remark = #{remark, jdbcType=VARCHAR} ,
	        ord_id = #{ordId, jdbcType=VARCHAR} ,
	        refund_id = #{refundId, jdbcType=BIGINT} ,
	        in_out = #{inOut, jdbcType=INTEGER} 
        WHERE 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM account_log WHERE
    ]]>
    </delete>
    
    <select id="getById" resultMap="AccountLog">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM account_log 
	        WHERE 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=userName and ''!=userName ">
	   			 		AND user_name = #{userName}
	   			   	</if>
			       	<if test="null!=remark and ''!=remark ">
	   			 		AND remark = #{remark}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=userName and ''!=userName">
				    <!-- 	AND user_name LIKE '%'||#{userName}||'%' oracle -->
			   			AND user_name LIKE concat('%',#{userName},'%')
			   			
			   		</if>
				    <if test="null!=remark and ''!=remark">
				    <!-- 	AND remark LIKE '%'||#{remark}||'%' oracle -->
			   			AND remark LIKE concat('%',#{remark},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=userId and ''!=userId">
			    AND user_id = #{userId}
			</if>
		   	<if test="null!=amt and ''!=amt">
			    AND amt = #{amt}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=ordId and ''!=ordId">
			    AND ord_id = #{ordId}
			</if>
		   	<if test="null!=refundId and ''!=refundId">
			    AND refund_id = #{refundId}
			</if>
		   	<if test="null!=inOut and ''!=inOut">
			    AND in_out = #{inOut}
			</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM account_log <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="AccountLog">
    	SELECT <include refid="columns"/> FROM account_log 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
		<if test="null!=offset and null!=limit">
	          limit #{offset} , #{limit} 
		</if>
		
		
    </select>

	
	<select id="find" resultMap="AccountLog">
	    SELECT <include refid="columns"/> FROM account_log 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
	<select id="findAccountLogs" resultMap="AccountLog">
	    SELECT <include refid="columns"/> FROM account_log WHERE 1=1 
			<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=userId and ''!=userId">
			    AND user_id = #{userId}
			</if>
		   	<if test="null!=amt and ''!=amt">
			    AND amt = #{amt}
			</if>
		   	<if test="null!=inOut and ''!=inOut">
			    AND in_out = #{inOut}
			</if>
    </select>
</mapper>

