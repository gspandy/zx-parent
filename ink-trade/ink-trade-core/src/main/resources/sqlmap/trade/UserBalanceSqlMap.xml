<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserBalance">

    <resultMap id="UserBalance" type="com.ink.trade.core.po.UserBalance">
        <result property="id" column="id"/>
        <result property="mchId" column="mch_id"/>
        <result property="userId" column="user_id"/>
        <result property="balance" column="balance"/>
        <result property="createTime" column="create_time"/>
        <result property="lastUpdatetime" column="last_updatetime"/>
        <result property="version" column="version"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,mch_id ,user_id ,balance ,create_time ,last_updatetime ,version 
	    ]]>
	</sql>

    <!-- 根据商户号和商户用户号查询用户余额 -->
    <select id="getByMerNoAndUserId" resultMap="UserBalance">
        SELECT <include refid="columns"/>
        <![CDATA[
	        FROM user_balance
	        WHERE
		        mch_id = #{mchId}
		    AND  user_id = #{userId}
	    ]]>
    </select>

    <!-- 更新金额 -->
    <update id="updateAmount" >
        <![CDATA[
        UPDATE user_balance SET
	        balance = balance +#{balance, jdbcType=DECIMAL} ,
	        last_updatetime = #{lastUpdatetime, jdbcType=TIMESTAMP}
        WHERE
	        id = #{id}
    ]]>
    </update>

    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    <![CDATA[
        INSERT INTO user_balance (
	        id  ,
	        mch_id  ,
	        user_id  ,
	        balance  ,
	        create_time  ,
	        last_updatetime  ,
	        version  
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{mchId, jdbcType=VARCHAR} ,
        	#{userId, jdbcType=VARCHAR} ,
        	#{balance, jdbcType=DECIMAL} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{lastUpdatetime, jdbcType=TIMESTAMP} ,
        	#{version, jdbcType=INTEGER} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO user_balance ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.mchId, jdbcType=VARCHAR} ,
        	#{item.userId, jdbcType=VARCHAR} ,
        	#{item.balance, jdbcType=DECIMAL} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.lastUpdatetime, jdbcType=TIMESTAMP} ,
        	#{item.version, jdbcType=INTEGER} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE user_balance SET
	        mch_id = #{mchId, jdbcType=VARCHAR} ,
	        user_id = #{userId, jdbcType=VARCHAR} ,
	        balance = #{balance, jdbcType=DECIMAL} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} ,
	        last_updatetime = #{lastUpdatetime, jdbcType=TIMESTAMP} ,
	        version = #{version, jdbcType=INTEGER} 
        WHERE 
	        id = #{id} 
    ]]>
    </update>
<update id="updateNotNull" >
			UPDATE user_balance
				<set>
			       	<if test="null!=mchId and ''!=mchId ">
	   			 		mch_id = #{mchId, jdbcType=VARCHAR} ,
	   			   	</if>
			       	<if test="null!=userId and ''!=userId ">
	   			 		user_id = #{userId, jdbcType=VARCHAR} ,
	   			   	</if>
			       	<if test="null!=balance and ''!=balance ">
	   			 		balance = #{balance, jdbcType=DECIMAL} ,
	   			   	</if>
			       	<if test="null!=createTime and ''!=createTime ">
	   			 		create_time = #{createTime, jdbcType=TIMESTAMP} ,
	   			   	</if>
			       	<if test="null!=lastUpdatetime and ''!=lastUpdatetime ">
	   			 		last_updatetime = #{lastUpdatetime, jdbcType=TIMESTAMP} ,
	   			   	</if>
			       	<if test="null!=version and ''!=version ">
	   			 		version = #{version, jdbcType=INTEGER} 
	   			   	</if>
				</set>
			WHERE
				id = #{id} 
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM user_balance WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="UserBalance">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM user_balance 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=mchId and ''!=mchId ">
	   			 		AND mch_id = #{mchId}
	   			   	</if>
			       	<if test="null!=userId and ''!=userId ">
	   			 		AND user_id = #{userId}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=mchId and ''!=mchId">
				    <!-- 	AND mch_id LIKE '%'||#{mchId}||'%' oracle -->
			   			AND mch_id LIKE concat('%',#{mchId},'%')
			   			
			   		</if>
				    <if test="null!=userId and ''!=userId">
				    <!-- 	AND user_id LIKE '%'||#{userId}||'%' oracle -->
			   			AND user_id LIKE concat('%',#{userId},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=balance and ''!=balance">
			    AND balance = #{balance}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=lastUpdatetimeBegin and ''!=lastUpdatetimeBegin">
		   		AND last_updatetime >= #{lastUpdatetimeBegin}
		   	</if>
		   	<if test="null!=lastUpdatetimeEnd and ''!=lastUpdatetimeEnd">
		   		AND last_updatetime &lt; #{lastUpdatetimeEnd}
		   	</if>
		   	<if test="null!=version and ''!=version">
			    AND version = #{version}
			</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM user_balance <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="UserBalance">
    	SELECT <include refid="columns"/> FROM user_balance 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<select id="find" resultMap="UserBalance">
	    SELECT <include refid="columns"/> FROM user_balance 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
</mapper>