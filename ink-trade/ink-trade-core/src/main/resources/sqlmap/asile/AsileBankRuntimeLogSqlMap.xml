<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AsileBankRuntimeLog">

    <resultMap id="AsileBankRuntimeLog" type="com.ink.asile.core.po.AsileBankRuntimeLog">
        <result property="id" column="id"/>
        <result property="asileName" column="asile_name"/>
        <result property="asileCode" column="asile_code" />
        <result property="bankName" column="bank_name"/>
        <result property="bankCode" column="bank_code" />
        <result property="asileProductCode" column="asile_product_code"/>
        <result property="asileProductName" column="asile_product_name"/>
        <result property="remark" column="remark"/>
        <result property="createTime" column="create_time"/>
        <result property="createrId" column="creater_id"/>
        <result property="createrName" column="creater_name"/>
        <result property="updateTime" column="update_time"/>
        <result property="updaterId" column="updater_id"/>
        <result property="updaterName" column="updater_name"/>
        <result property="isDelete" column="is_delete"/>
        <result property="version" column="version"/>
        <result property="offOnLine" column="off_on_line"/>
        <result property="changeWhy" column="change_why"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,asile_name ,asile_id ,bank_name ,bank_code ,asile_product_code ,asile_product_name ,remark ,create_time ,creater_id ,creater_name ,update_time ,updater_id ,updater_name ,is_delete ,version ,off_on_line ,change_why 
	    ]]>
	</sql>
	
    <insert id="insert"  keyProperty="id" useGeneratedKeys="true">
    <![CDATA[
        INSERT INTO asile_bank_runtime_log (
	        id  ,
	        asile_name  ,
	        asile_id  ,
	        bank_name  ,
	        bank_code  ,
	        asile_product_code  ,
	        asile_product_name  ,
	        remark  ,
	        create_time  ,
	        creater_id  ,
	        creater_name  ,
	        update_time  ,
	        updater_id  ,
	        updater_name  ,
	        is_delete  ,
	        version  ,
	        off_on_line  ,
	        change_why  
        ) VALUES (
        	#{id, jdbcType=BIGINT} ,
        	#{asileName, jdbcType=VARCHAR} ,
        	#{asileId, jdbcType=BIGINT} ,
        	#{bankName, jdbcType=VARCHAR} ,
        	#{bankCode, jdbcType=VARCHAR} ,
        	#{asileProductCode, jdbcType=VARCHAR} ,
        	#{asileProductName, jdbcType=VARCHAR} ,
        	#{remark, jdbcType=VARCHAR} ,
        	#{createTime, jdbcType=TIMESTAMP} ,
        	#{createrId, jdbcType=BIGINT} ,
        	#{createrName, jdbcType=VARCHAR} ,
        	#{updateTime, jdbcType=TIMESTAMP} ,
        	#{updaterId, jdbcType=BIGINT} ,
        	#{updaterName, jdbcType=VARCHAR} ,
        	#{isDelete, jdbcType=CHAR} ,
        	#{version, jdbcType=INTEGER} ,
        	#{offOnLine, jdbcType=TINYINT} ,
        	#{changeWhy, jdbcType=VARCHAR} 
        )
    ]]>
    </insert>
   <insert id="insertBatch"   parameterType="java.util.List">
      INSERT INTO asile_bank_runtime_log ( <include refid="columns"/>) values
        <foreach collection="list" item="item" separator="," >
    (
        	#{item.id, jdbcType=BIGINT} ,
        	#{item.asileName, jdbcType=VARCHAR} ,
        	#{item.asileId, jdbcType=BIGINT} ,
        	#{item.bankName, jdbcType=VARCHAR} ,
        	#{item.bankCode, jdbcType=BIGINT} ,
        	#{item.asileProductCode, jdbcType=VARCHAR} ,
        	#{item.asileProductName, jdbcType=VARCHAR} ,
        	#{item.remark, jdbcType=VARCHAR} ,
        	#{item.createTime, jdbcType=TIMESTAMP} ,
        	#{item.createrId, jdbcType=BIGINT} ,
        	#{item.createrName, jdbcType=VARCHAR} ,
        	#{item.updateTime, jdbcType=TIMESTAMP} ,
        	#{item.updaterId, jdbcType=BIGINT} ,
        	#{item.updaterName, jdbcType=VARCHAR} ,
        	#{item.isDelete, jdbcType=CHAR} ,
        	#{item.version, jdbcType=INTEGER} ,
        	#{item.offOnLine, jdbcType=TINYINT} ,
        	#{item.changeWhy, jdbcType=VARCHAR} 
    )
        </foreach>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE asile_bank_runtime_log SET
	        asile_name = #{asileName, jdbcType=VARCHAR} ,
	        asile_id = #{asileId, jdbcType=BIGINT} ,
	        bank_name = #{bankName, jdbcType=VARCHAR} ,
	        bank_code = #{bankCode, jdbcType=VARCHAR} ,
	        asile_product_code = #{asileProductCode, jdbcType=VARCHAR} ,
	        asile_product_name = #{asileProductName, jdbcType=VARCHAR} ,
	        remark = #{remark, jdbcType=VARCHAR} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP} ,
	        creater_id = #{createrId, jdbcType=BIGINT} ,
	        creater_name = #{createrName, jdbcType=VARCHAR} ,
	        update_time = #{updateTime, jdbcType=TIMESTAMP} ,
	        updater_id = #{updaterId, jdbcType=BIGINT} ,
	        updater_name = #{updaterName, jdbcType=VARCHAR} ,
	        is_delete = #{isDelete, jdbcType=CHAR} ,
	        version = #{version, jdbcType=INTEGER} ,
	        off_on_line = #{offOnLine, jdbcType=TINYINT} ,
	        change_why = #{changeWhy, jdbcType=VARCHAR} 
        WHERE 
	        id = #{id} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM asile_bank_runtime_log WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="AsileBankRuntimeLog">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM asile_bank_runtime_log 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
	    	<choose>
	    		<when test="queryType==0">
			       	<if test="null!=asileName and ''!=asileName ">
	   			 		AND asile_name = #{asileName}
	   			   	</if>
			       	<if test="null!=bankName and ''!=bankName ">
	   			 		AND bank_name = #{bankName}
	   			   	</if>
			       	<if test="null!=asileProductCode and ''!=asileProductCode ">
	   			 		AND asile_product_code = #{asileProductCode}
	   			   	</if>
			       	<if test="null!=asileProductName and ''!=asileProductName ">
	   			 		AND asile_product_name = #{asileProductName}
	   			   	</if>
			       	<if test="null!=remark and ''!=remark ">
	   			 		AND remark = #{remark}
	   			   	</if>
			       	<if test="null!=createrName and ''!=createrName ">
	   			 		AND creater_name = #{createrName}
	   			   	</if>
			       	<if test="null!=updaterName and ''!=updaterName ">
	   			 		AND updater_name = #{updaterName}
	   			   	</if>
			       	<if test="null!=isDelete and ''!=isDelete ">
	   			 		AND is_delete = #{isDelete}
	   			   	</if>
			       	<if test="null!=changeWhy and ''!=changeWhy ">
	   			 		AND change_why = #{changeWhy}
	   			   	</if>
	       		</when>
	       		<otherwise>
				    <if test="null!=asileName and ''!=asileName">
				    <!-- 	AND asile_name LIKE '%'||#{asileName}||'%' oracle -->
			   			AND asile_name LIKE concat('%',#{asileName},'%')
			   			
			   		</if>
				    <if test="null!=bankName and ''!=bankName">
				    <!-- 	AND bank_name LIKE '%'||#{bankName}||'%' oracle -->
			   			AND bank_name LIKE concat('%',#{bankName},'%')
			   			
			   		</if>
				    <if test="null!=asileProductCode and ''!=asileProductCode">
				    <!-- 	AND asile_product_code LIKE '%'||#{asileProductCode}||'%' oracle -->
			   			AND asile_product_code LIKE concat('%',#{asileProductCode},'%')
			   			
			   		</if>
				    <if test="null!=asileProductName and ''!=asileProductName">
				    <!-- 	AND asile_product_name LIKE '%'||#{asileProductName}||'%' oracle -->
			   			AND asile_product_name LIKE concat('%',#{asileProductName},'%')
			   			
			   		</if>
				    <if test="null!=remark and ''!=remark">
				    <!-- 	AND remark LIKE '%'||#{remark}||'%' oracle -->
			   			AND remark LIKE concat('%',#{remark},'%')
			   			
			   		</if>
				    <if test="null!=createrName and ''!=createrName">
				    <!-- 	AND creater_name LIKE '%'||#{createrName}||'%' oracle -->
			   			AND creater_name LIKE concat('%',#{createrName},'%')
			   			
			   		</if>
				    <if test="null!=updaterName and ''!=updaterName">
				    <!-- 	AND updater_name LIKE '%'||#{updaterName}||'%' oracle -->
			   			AND updater_name LIKE concat('%',#{updaterName},'%')
			   			
			   		</if>
				    <if test="null!=isDelete and ''!=isDelete">
				    <!-- 	AND is_delete LIKE '%'||#{isDelete}||'%' oracle -->
			   			AND is_delete LIKE concat('%',#{isDelete},'%')
			   			
			   		</if>
				    <if test="null!=changeWhy and ''!=changeWhy">
				    <!-- 	AND change_why LIKE '%'||#{changeWhy}||'%' oracle -->
			   			AND change_why LIKE concat('%',#{changeWhy},'%')
			   			
			   		</if>
		        </otherwise>
	      	</choose>
		   	<if test="null!=id and ''!=id">
			    AND id = #{id}
			</if>
		   	<if test="null!=asileId and ''!=asileId">
			    AND asile_id = #{asileId}
			</if>
		   	<if test="null!=bankCode and ''!=bankCode">
			    AND bank_code = #{bankCode}
			</if>
		   	<if test="null!=createTimeBegin and ''!=createTimeBegin">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="null!=createTimeEnd and ''!=createTimeEnd">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
		   	<if test="null!=createrId and ''!=createrId">
			    AND creater_id = #{createrId}
			</if>
		   	<if test="null!=updateTimeBegin and ''!=updateTimeBegin">
		   		AND update_time >= #{updateTimeBegin}
		   	</if>
		   	<if test="null!=updateTimeEnd and ''!=updateTimeEnd">
		   		AND update_time &lt; #{updateTimeEnd}
		   	</if>
		   	<if test="null!=updaterId and ''!=updaterId">
			    AND updater_id = #{updaterId}
			</if>
		   	<if test="null!=version and ''!=version">
			    AND version = #{version}
			</if>
		   	<if test="null!=offOnLine and ''!=offOnLine">
			    AND off_on_line = #{offOnLine}
			</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM asile_bank_runtime_log <include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="AsileBankRuntimeLog">
    	SELECT <include refid="columns"/> FROM asile_bank_runtime_log 
		<include refid="findWhere"/>
		<if test="null!=sortColumns and ''!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
		<if test="null!=offset and null!=limit">
	          limit #{offset} , #{limit} 
		</if>
		
		
    </select>

	
	<select id="find" resultMap="AsileBankRuntimeLog">
	    SELECT <include refid="columns"/> FROM asile_bank_runtime_log 
		<include refid="findWhere"/>
		<if test="null!=sortColumns">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
</mapper>

